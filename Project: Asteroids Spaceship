rectMode(CENTER); //setting the rectangle mode to center, meaning that the x and y location for any given rectangle will refer to the position of its center rather than the top left corner or any other corner. 

//this is a space ship type object constructor, based off one of Khan Academy's mover examples

var Spaceship = function(){
    this.position = new PVector(200,200);
    this.velocity = new PVector(0, 0);
    this.acceleration = new PVector(0, 0);
    this.movingSpeed = 2; //This is the magnitude of the direction vector which will be used along with the rotate angle variable in order to find the x and y of a vector. It will use basic trigonometry. Think of tis moving speed as the hypotenuse of a right triangle.
    this.rotateAngle = 0; //This will hold the angle at which the spaceship is rotated. It will come in handy when trying to figure out the x and y of the direction vector.
};


//In this case, a simplified version of the force = mass * acceleration is being used. The formula here is force = acceleration. I was not going to plan on giving my ship a mass in this case because of how simple the concept is. It is only one object. Why should I care about its mass? Nevertheless, I am still incorporating forces into this project as you can plainly see. This is below, is just a function which I will use to apply forces which will get added to acceleration. forces are necessary to incorporate in order to make sure that the ship does not fly forever when thrust force is applied to it to make it move. A friction force will be applied to counter the thrust force.
Spaceship.prototype.applyForce = function(force){
    this.acceleration.add(force);
};

//This is what will be used to update my ship and change its data so that it represents another area on the screen.
Spaceship.prototype.update = function(){
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    this.acceleration.set(0, 0);
};

//This is the function which I will use to calculate the thrust force PVector which will be applied to acceleration. All this function is doing is seeing how much the spaceship is rotated by and then using SOH CAH TOA trigonometric ratios to come up with the x and y direction of the force vector. To put it simply, this is a formula I devised in order to apply a thrust force in the direction that the spaceship is facing.
Spaceship.prototype.calculateThrustForce = function(){
    return (new PVector (cos(this.rotateAngle)*this.movingSpeed, sin(this.rotateAngle)*this.movingSpeed)); //This is just basic trigonometry
};
Spaceship.prototype.turnLeft = function(){
    this.rotateAngle-=2.5; //This function will be called when the user clicks the left arrow, it will rotate the spaceship 2.5 degrees left.
}; 

Spaceship.prototype.turnRight = function(){
    this.rotateAngle+=2.5; //This function will be called when the user clicks the left arrow, it will rotate the spaceship 2.5 degrees right.
};

//This is how the spaceship will actually look.
Spaceship.prototype.display = function(){
    pushMatrix();
    translate(this.position.x, this.position.y); //move the axis to the position of the spaceship
    rotate(this.rotateAngle+90); //Apply a rotation to the graph that the spaceship is beeing drawn on according to the value of how much the spaceship is rotated by (The value is based off the rotations applied to the spaceship by the user when they were clicking the left and/or right arrow)
    //This below is just drawing the actual spaceship with the shapes and everything
    fill(0, 1, 1, 0);
    stroke(0);
    triangle(0, -50, 40, 25, -40, 25);
    rect(-20, 25, 15, 10);
    rect(15, 25, 15, 10);
    popMatrix();
};
//this is what is used to check if the spaceship is out of the map. If the spaceship is out of the map, then when this function is called on the spaceship object it will be made to wrap around the canvas
Spaceship.prototype.checkEdges = function(){
    if(this.position.x > width){
        this.position.x = 0;
    }else if(this.position.x < 0){
        this.position.x = width;
    }
    if(this.position.y > height){
        this.position.y = 0;
    }else if(this.position.y < 0){
        this.position.y = height;
    }
};

//initializing a new spaceship type object
var ship = new Spaceship();
draw = function() {
    background(131, 212, 134); //Setting the background color
    var airDrag = ship.velocity.get(); //this is friction, if I do not apply a simple friction than the spaceship will keep on moving when thrust force is applied which is extremely unrealistic because in the real world forces slow things down
    airDrag.mult(-0.01); //this is the air drag force vector, it is being multiplied by a negative number in order to create an opposite force against the direction in which the spaceship is moving in
    ship.applyForce(airDrag); //Apply the friction to come up with the accleration of the spaceship.
    ship.update(); //update the spaceship with the new information
    ship.checkEdges(); //make sure the spaceship is not off the map
    ship.display(); //displlay the spaceship in every frame
};
//This is the function which will run at any time one of the keys are clicked in order to control the spacesip
keyPressed = function(){
    if (keyCode === RIGHT){ //if the right arrow is pressed than the spaceship will turn right
        ship.turnRight();
    }else if (keyCode === LEFT){ //if the left arrow is pressed than the spaceship will turn left 
        ship.turnLeft();
    }else if (keyCode === 90/*z*/){ //if the z arrow is pressed, then the thrust force vector will be calculated and applied to the spaceship. 
        ship.applyForce(ship.calculateThrustForce());
    }
};
